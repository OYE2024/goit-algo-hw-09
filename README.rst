# Порівняння жадібних алгоритмів та алгоритму динамічного програмування:

## Алгоритми

### 1. Жадібний алгоритм — це підхід до розв’язання задач, у якому на кожному кроці приймається локально оптимальне рішення, сподіваючись, що воно призведе до глобально оптимального результату.

### 2. Динамічне програмування – це метод розв’язання складних задач шляхом розбиття їх на підзадачі, розв’язання кожної підзадачі один раз і збереження її результату для повторного використання.

## Результати

Кожен алгоритм у вигляді функцій find_coins_greedy та find_min_coins було протестовано на діапазоні значень від 1 до 100000.

### Результати тесту:

- **Greedy Algorithm**:
  значення 10: результат {10: 1}
  значення 113: результат {50: 2, 10: 1, 2: 1, 1: 1}
  значення 1279: результат {50: 25, 25: 1, 2: 2}
  значення 127950: результат {50: 2559}

- **Dynamic Programming**:  
  значення 10: результат {10: 1}
  значення 113: результат {1: 1, 2: 1, 10: 1, 50: 2}
  значення 1279: результат {2: 2, 25: 1, 50: 25}
  значення 127950: RecursionError: maximum recursion depth exceeded 

## Висновки

Динамічне програмування, за рахунок використання рекурсії, на великих значеннях, у нашому випадку 10 у 5 ступені, видає помилку, пов'язану з перевищенням максимальної кількості рекурсивних викликів, в той час як жадібний алгоритм продовжує працювати.
Часова складність:
Жадібні алгоритми - # O(n log n)
Динамічне програмування - O(n * amount)
Дінамічне програмування на великих значеннях потребує багато пам'яті. 